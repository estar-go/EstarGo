//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.8
//
// <auto-generated>
//
// Generated from file `Proto.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Proto_h__
#define __Proto_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 8
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace GoKu
{

class InterfaceEval;
class InterfaceEvalPrx;

}

namespace GoKu
{

using RequestBatch = ::std::vector<::std::string>;

struct MoveProb
{
    int pos;
    float prob;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const float&> ice_tuple() const
    {
        return std::tie(pos, prob);
    }
};

using PolicyReply = ::std::vector<MoveProb>;

struct Reply
{
    ::GoKu::PolicyReply p;
    float v;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::GoKu::PolicyReply&, const float&> ice_tuple() const
    {
        return std::tie(p, v);
    }
};

using ReplyBatch = ::std::vector<Reply>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace GoKu
{

class InterfaceEval : public virtual ::Ice::Object
{
public:

    using ProxyType = InterfaceEvalPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void evaluate(RequestBatch req, ReplyBatch& rep, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_evaluate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace GoKu
{

class InterfaceEvalPrx : public virtual ::Ice::Proxy<InterfaceEvalPrx, ::Ice::ObjectPrx>
{
public:

    void evaluate(const RequestBatch& req, ReplyBatch& rep, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        rep = _makePromiseOutgoing<::GoKu::ReplyBatch>(true, this, &InterfaceEvalPrx::_iceI_evaluate, req, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto evaluateAsync(const RequestBatch& req, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::GoKu::ReplyBatch>>().get_future())
    {
        return _makePromiseOutgoing<::GoKu::ReplyBatch, P>(false, this, &InterfaceEvalPrx::_iceI_evaluate, req, context);
    }

    ::std::function<void()>
    evaluateAsync(const RequestBatch& req,
                  ::std::function<void(::GoKu::ReplyBatch)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::GoKu::ReplyBatch>(std::move(response), std::move(ex), std::move(sent), this, &GoKu::InterfaceEvalPrx::_iceI_evaluate, req, context);
    }

    /// \cond INTERNAL
    void _iceI_evaluate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::GoKu::ReplyBatch>>&, const RequestBatch&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    InterfaceEvalPrx() = default;
    friend ::std::shared_ptr<InterfaceEvalPrx> IceInternal::createProxy<InterfaceEvalPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::GoKu::MoveProb>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::GoKu::MoveProb, S>
{
    static void read(S* istr, ::GoKu::MoveProb& v)
    {
        istr->readAll(v.pos, v.prob);
    }
};

template<>
struct StreamableTraits<::GoKu::Reply>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::GoKu::Reply, S>
{
    static void read(S* istr, ::GoKu::Reply& v)
    {
        istr->readAll(v.p, v.v);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace GoKu
{

using InterfaceEvalPtr = ::std::shared_ptr<InterfaceEval>;
using InterfaceEvalPrxPtr = ::std::shared_ptr<InterfaceEvalPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace GoKu
{

class InterfaceEval;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< InterfaceEval>&);
::IceProxy::Ice::Object* upCast(InterfaceEval*);
/// \endcond

}

}

namespace GoKu
{

class InterfaceEval;
/// \cond INTERNAL
::Ice::Object* upCast(InterfaceEval*);
/// \endcond
typedef ::IceInternal::Handle< InterfaceEval> InterfaceEvalPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::GoKu::InterfaceEval> InterfaceEvalPrx;
typedef InterfaceEvalPrx InterfaceEvalPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(InterfaceEvalPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace GoKu
{

typedef ::std::vector< ::std::string> RequestBatch;

struct MoveProb
{
    ::Ice::Int pos;
    ::Ice::Float prob;
};

typedef ::std::vector<MoveProb> PolicyReply;

struct Reply
{
    ::GoKu::PolicyReply p;
    ::Ice::Float v;
};

typedef ::std::vector<Reply> ReplyBatch;

}

namespace GoKu
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::GoKu::InterfaceEval::begin_evaluate.
 * Create a wrapper instance by calling ::GoKu::newCallback_InterfaceEval_evaluate.
 */
class Callback_InterfaceEval_evaluate_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InterfaceEval_evaluate_Base> Callback_InterfaceEval_evaluatePtr;

}

namespace IceProxy
{

namespace GoKu
{

class InterfaceEval : public virtual ::Ice::Proxy<InterfaceEval, ::IceProxy::Ice::Object>
{
public:

    void evaluate(const ::GoKu::RequestBatch& req, ::GoKu::ReplyBatch& rep, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_evaluate(rep, _iceI_begin_evaluate(req, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_evaluate(const ::GoKu::RequestBatch& req, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_evaluate(req, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_evaluate(const ::GoKu::RequestBatch& req, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_evaluate(req, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_evaluate(const ::GoKu::RequestBatch& req, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_evaluate(req, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_evaluate(const ::GoKu::RequestBatch& req, const ::GoKu::Callback_InterfaceEval_evaluatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_evaluate(req, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_evaluate(const ::GoKu::RequestBatch& req, const ::Ice::Context& context, const ::GoKu::Callback_InterfaceEval_evaluatePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_evaluate(req, context, cb, cookie);
    }

    void end_evaluate(::GoKu::ReplyBatch& rep, const ::Ice::AsyncResultPtr& result);
    /// \cond INTERNAL

    void _iceI_end_evaluate(::GoKu::ReplyBatch& iceP_rep, const ::Ice::AsyncResultPtr&);
    /// \endcond

private:

    ::Ice::AsyncResultPtr _iceI_begin_evaluate(const ::GoKu::RequestBatch&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace GoKu
{

class InterfaceEval : public virtual ::Ice::Object
{
public:

    typedef InterfaceEvalPrx ProxyType;
    typedef InterfaceEvalPtr PointerType;

    virtual ~InterfaceEval();

#ifdef ICE_CPP11_COMPILER
    InterfaceEval() = default;
    InterfaceEval(const InterfaceEval&) = default;
    InterfaceEval& operator=(const InterfaceEval&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void evaluate(const RequestBatch& req, ReplyBatch& rep, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_evaluate(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const InterfaceEval& lhs, const InterfaceEval& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const InterfaceEval& lhs, const InterfaceEval& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::GoKu::MoveProb>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::GoKu::MoveProb, S>
{
    static void write(S* ostr, const ::GoKu::MoveProb& v)
    {
        ostr->write(v.pos);
        ostr->write(v.prob);
    }
};

template<typename S>
struct StreamReader< ::GoKu::MoveProb, S>
{
    static void read(S* istr, ::GoKu::MoveProb& v)
    {
        istr->read(v.pos);
        istr->read(v.prob);
    }
};

template<>
struct StreamableTraits< ::GoKu::Reply>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::GoKu::Reply, S>
{
    static void write(S* ostr, const ::GoKu::Reply& v)
    {
        ostr->write(v.p);
        ostr->write(v.v);
    }
};

template<typename S>
struct StreamReader< ::GoKu::Reply, S>
{
    static void read(S* istr, ::GoKu::Reply& v)
    {
        istr->read(v.p);
        istr->read(v.v);
    }
};

}
/// \endcond

namespace GoKu
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::GoKu::InterfaceEval::begin_evaluate.
 * Create a wrapper instance by calling ::GoKu::newCallback_InterfaceEval_evaluate.
 */
template<class T>
class CallbackNC_InterfaceEval_evaluate : public Callback_InterfaceEval_evaluate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ReplyBatch&);

    CallbackNC_InterfaceEval_evaluate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InterfaceEvalPrx proxy = InterfaceEvalPrx::uncheckedCast(result->getProxy());
        ReplyBatch iceP_rep;
        try
        {
            proxy->end_evaluate(iceP_rep, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_rep);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::GoKu::InterfaceEval::begin_evaluate.
 */
template<class T> Callback_InterfaceEval_evaluatePtr
newCallback_InterfaceEval_evaluate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ReplyBatch&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InterfaceEval_evaluate<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::GoKu::InterfaceEval::begin_evaluate.
 */
template<class T> Callback_InterfaceEval_evaluatePtr
newCallback_InterfaceEval_evaluate(T* instance, void (T::*cb)(const ReplyBatch&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InterfaceEval_evaluate<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::GoKu::InterfaceEval::begin_evaluate.
 * Create a wrapper instance by calling ::GoKu::newCallback_InterfaceEval_evaluate.
 */
template<class T, typename CT>
class Callback_InterfaceEval_evaluate : public Callback_InterfaceEval_evaluate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ReplyBatch&, const CT&);

    Callback_InterfaceEval_evaluate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        InterfaceEvalPrx proxy = InterfaceEvalPrx::uncheckedCast(result->getProxy());
        ReplyBatch iceP_rep;
        try
        {
            proxy->end_evaluate(iceP_rep, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_rep, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::GoKu::InterfaceEval::begin_evaluate.
 */
template<class T, typename CT> Callback_InterfaceEval_evaluatePtr
newCallback_InterfaceEval_evaluate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ReplyBatch&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InterfaceEval_evaluate<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::GoKu::InterfaceEval::begin_evaluate.
 */
template<class T, typename CT> Callback_InterfaceEval_evaluatePtr
newCallback_InterfaceEval_evaluate(T* instance, void (T::*cb)(const ReplyBatch&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InterfaceEval_evaluate<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
